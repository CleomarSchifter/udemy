{"nbformat_minor": 0, "nbformat": 4, "cells": [{"source": "import pandas\nimport scipy\nimport numpy\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.preprocessing import Binarizer\nfrom scipy.stats import boxcox\nfrom sklearn.preprocessing import LabelEncoder", "cell_type": "code", "execution_count": 26, "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Importa os dados\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data\"\nnames = ['preg', 'plas', 'pres', 'skin', 'test', 'mass', 'pedi', 'age', 'class']\ndataframe = pandas.read_csv(url, names=names)\narray = dataframe.values\n\n# Separa as vari\u00e1veis de entrada e sa\u00edda\nX = array[:,0:8]\nY = array[:,8]", "cell_type": "code", "execution_count": 13, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "# Scale (intervalo entre 0 e 1)\nscaler = MinMaxScaler(feature_range=(0, 1))\nrescaledX = scaler.fit_transform(X)\n\n# Resultados\nnumpy.set_printoptions(precision=3)\nprint(rescaledX[0:5,:])", "cell_type": "code", "execution_count": 3, "outputs": [{"output_type": "stream", "name": "stdout", "text": "[[ 0.353  0.744  0.59   0.354  0.     0.501  0.234  0.483]\n [ 0.059  0.427  0.541  0.293  0.     0.396  0.117  0.167]\n [ 0.471  0.92   0.525  0.     0.     0.347  0.254  0.183]\n [ 0.059  0.447  0.541  0.232  0.111  0.419  0.038  0.   ]\n [ 0.     0.688  0.328  0.354  0.199  0.642  0.944  0.2  ]]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Standardize (M\u00e9dia igual a 0 e desvio padr\u00e3o igual a 1)\nscaler = StandardScaler().fit(X)\nrescaledX = scaler.transform(X)\n\n# Resultados\nnumpy.set_printoptions(precision=3)\nprint(rescaledX[0:5,:])", "cell_type": "code", "execution_count": 6, "outputs": [{"output_type": "stream", "name": "stdout", "text": "[[ 0.64   0.848  0.15   0.907 -0.693  0.204  0.468  1.426]\n [-0.845 -1.123 -0.161  0.531 -0.693 -0.684 -0.365 -0.191]\n [ 1.234  1.944 -0.264 -1.288 -0.693 -1.103  0.604 -0.106]\n [-0.845 -0.998 -0.161  0.155  0.123 -0.494 -0.921 -1.042]\n [-1.142  0.504 -1.505  0.907  0.766  1.41   5.485 -0.02 ]]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Normalize (linha com tamanho 1)\nscaler = Normalizer().fit(X)\nnormalizedX = scaler.transform(X)\n\n# Resultados\nnumpy.set_printoptions(precision=3)\nprint(normalizedX[0:5,:])\n", "cell_type": "code", "execution_count": 9, "outputs": [{"output_type": "stream", "name": "stdout", "text": "[[ 0.034  0.828  0.403  0.196  0.     0.188  0.004  0.28 ]\n [ 0.008  0.716  0.556  0.244  0.     0.224  0.003  0.261]\n [ 0.04   0.924  0.323  0.     0.     0.118  0.003  0.162]\n [ 0.007  0.588  0.436  0.152  0.622  0.186  0.001  0.139]\n [ 0.     0.596  0.174  0.152  0.731  0.188  0.01   0.144]]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Binarize\nbinarizer = Binarizer(threshold=0.0).fit(X)\nbinaryX = binarizer.transform(X)\n\n# Resultados\nnumpy.set_printoptions(precision=3)\nprint(binaryX[0:5,:])", "cell_type": "code", "execution_count": 15, "outputs": [{"output_type": "stream", "name": "stdout", "text": "[[ 1.  1.  1.  1.  0.  1.  1.  1.]\n [ 1.  1.  1.  1.  0.  1.  1.  1.]\n [ 1.  1.  1.  0.  0.  1.  1.  1.]\n [ 1.  1.  1.  1.  1.  1.  1.  1.]\n [ 0.  1.  1.  1.  1.  1.  1.  1.]]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Box-Cox\nX_boxcox = boxcox(1+X[:,2])[0]\nprint(X_boxcox[0:35])", "cell_type": "code", "execution_count": 24, "outputs": [{"output_type": "stream", "name": "stdout", "text": "[ 612.796  533.835  508.436  533.835  242.169  640.021  344.14     0.\n  586.02   967.864  904.506  640.021  724.34   459.052  612.796    0.\n  782.715  640.021  154.314  586.02   842.78   782.715  873.438  724.34\n  935.983  586.02   667.689  533.835  753.314  904.506  653.8    667.689\n  435.08   904.506  695.797]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Factor (transforma strings em n\u00fameros)\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/undocumented/connectionist-bench/sonar/sonar.all-data\"\ndataset = pandas.read_csv(url, header=None)\narray = dataset.values\ny = array[:, 60]\n\nencoder = LabelEncoder()\nencoder.fit(y)\nprint(encoder.classes_)\n\nencoded_y = encoder.transform(y)\nprint(encoded_y)", "cell_type": "code", "execution_count": 27, "outputs": [{"output_type": "stream", "name": "stdout", "text": "['M' 'R']\n[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "", "cell_type": "code", "execution_count": null, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}], "metadata": {"kernelspec": {"display_name": "Python [Root]", "name": "Python [Root]", "language": "python"}, "environment": {"prefix": "C:\\Users\\Weslley\\Anaconda2\\envs\\Root", "name": "Root"}, "language_info": {"mimetype": "text/x-python", "nbconvert_exporter": "python", "name": "python", "pygments_lexer": "ipython2", "version": "2.7.12", "file_extension": ".py", "codemirror_mode": {"version": 2, "name": "ipython"}}, "anaconda-cloud": {"environment": "Root", "attach-environment": true, "summary": "Transformando os dados para extrair melhores resultados dos algoritmos"}}}